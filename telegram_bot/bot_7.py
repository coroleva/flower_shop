from config import TOKEN
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiohttp
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup


API_TOKEN = TOKEN
API_URL_USERS = "http://127.0.0.1:8000/catalog/api/telegram_users/"  # API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
API_URL = "http://127.0.0.1:8000"  # –ê–¥—Ä–µ—Å API –∫–∞—Ç–∞–ª–æ–≥–∞
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_states = {}
# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cart = {}
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL_USERS}?telegram_user_id={user_id}") as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("registered", False):
                        await show_main_menu(message)
                        return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–∞—Å –µ—â—ë –Ω–µ—Ç –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ. –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.")
        registration_states[user_id] = {"step": "name"}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_main_menu(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥")
    builder.button(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    builder.button(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    builder.button(text="üì¢ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    builder.button(text="‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    builder.adjust(2, 2)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.message(lambda message: message.from_user.id in registration_states)
async def handle_registration(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    state = registration_states[user_id]

    if state["step"] == "name":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        state["name"] = message.text
        state["step"] = "email"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

    elif state["step"] == "email":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        email = message.text
        if "@" not in email or "." not in email:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
            return

        state["email"] = email

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "telegram_user_id": user_id,
                    "telegram_username": message.from_user.username,
                    "first_name": state["name"],
                    "email": state["email"],
                }
                async with session.post(API_URL_USERS, json=payload) as response:
                    if response.status == 201:
                        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                        await show_main_menu(message)
                        registration_states.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    else:
                        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")




# @dp.message(lambda message: message.text == "üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥")
# async def view_catalog(message: types.Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥'"""
#     try:
#         # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å API
#         async with aiohttp.ClientSession() as session:
#             async with session.get(f"{API_URL}/catalog/api/catalog/") as response:
#                 if response.status == 200:
#                     data = await response.json()
#                     catalog = data.get("catalog", [])
#                 else:
#                     await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–∞–ª–æ–≥–µ üòî")
#                     return
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã
#         if not catalog:
#             await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#             return
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#         for product in catalog:
#             # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#             image_url = product.get("image", "")
#             if image_url:
#                 image_url = image_url.replace("http://127.0.0.1:8000", API_URL)  # –∑–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–∞ –ø–æ–ª–Ω—ã–π
#
#             text = (
#                 f"üå∏ <b>{product['name']}</b>\n"
#                 f"–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
#                 f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
#                 f"–í –Ω–∞–ª–∏—á–∏–∏: {product['count']} —à—Ç.\n"
#             )
#
#             # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
#             button = InlineKeyboardButton(
#                 text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
#                 callback_data=f"add_to_cart:{product['id']}"  # –ø–µ—Ä–µ–¥–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
#             )
#             markup = InlineKeyboardMarkup(inline_keyboard=[[button]])
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
#             if image_url:
#                 await message.answer(text, parse_mode="HTML", reply_markup=markup, photo=image_url)
#             else:
#                 await message.answer(text, parse_mode="HTML", reply_markup=markup)
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda message: message.text == "üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥")
async def view_catalog(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥'"""
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å API
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/catalog/api/catalog/") as response:
                if response.status == 200:
                    data = await response.json()
                    catalog = data.get("catalog", [])
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–∞–ª–æ–≥–µ üòî")
                    return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã
        if not catalog:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        list_url = [
            'https://res.cloudinary.com/dbtyt71a4/image/upload/v1737656902/f2_fsasop.jpg',
            'https://res.cloudinary.com/dbtyt71a4/image/upload/v1737656902/f3_v07wqw.jpg',
            'https://res.cloudinary.com/dbtyt71a4/image/upload/v1737656902/f4_edgnde.jpg',
            'https://res.cloudinary.com/dbtyt71a4/image/upload/v1737656902/f8_tb0cme.jpg',
            'https://res.cloudinary.com/dbtyt71a4/image/upload/v1737656903/f6_d9obe7.jpg',
            'https://res.cloudinary.com/dbtyt71a4/image/upload/v1737656902/f1_wbudcx.jpg'
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for index, product in enumerate(catalog):
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_url = list_url[index % len(list_url)]  # –¶–∏–∫–ª–∏—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫–∏

            text = (
                f"üå∏ <b>{product['name']}</b>\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"–í –Ω–∞–ª–∏—á–∏–∏: {product['count']} —à—Ç.\n"
            )

            # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
            button = InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add_to_cart:{product['id']}"  # –ø–µ—Ä–µ–¥–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
            )
            markup = InlineKeyboardMarkup(inline_keyboard=[[button]])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            try:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=image_url,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
                await message.answer(text, parse_mode="HTML", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@dp.callback_query(lambda c: c.data.startswith('add_to_cart:'))
async def add_to_cart(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'"""
    product_id = callback_query.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    if user_id not in cart:
        cart[user_id] = []

    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ –µ–≥–æ ID
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/catalog/api/catalog/") as response:
            if response.status == 200:
                data = await response.json()
                catalog = data.get("catalog", [])
            else:
                await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–∞–ª–æ–≥–µ.")
                return

    product = next((item for item in catalog if item['id'] == int(product_id)), None)

    if product:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cart[user_id].append({'product': product, 'quantity': 0})
        await callback_query.message.answer(f"–¢–æ–≤–∞—Ä '{product['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
    else:
        await callback_query.message.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")

@dp.message(lambda message: message.text.isdigit())  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ
async def set_quantity(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    quantity = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if user_id not in cart or not cart[user_id]:
        await message.answer("–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ, –∏—Å–∫–ª—é—á–∞—è —à–∞–≥–∏
    products_in_cart = [item for item in cart[user_id] if 'product' in item]

    if not products_in_cart:
        await message.answer("–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    last_product = products_in_cart[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    product = last_product['product']  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã

    if quantity > product['count']:
        await message.answer(
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ —Å–∫–ª–∞–¥–µ —Ç–æ–ª—å–∫–æ {product['count']} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ '{product['name']}'. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º {product['count']}."
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    last_product['quantity'] = quantity  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '{product['name']}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {quantity} —à—Ç.")

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    await show_cart(message)

async def show_cart(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = message.from_user.id
    if user_id not in cart or not cart[user_id]:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    cart_items = cart[user_id]
    cart_text = "–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n"
    for item in cart_items:
        if 'product' in item:
            product = item['product']
            cart_text += f"–¢–æ–≤–∞—Ä: {product['name']} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.\n"
        else:
            cart_text += f"–¢–æ–≤–∞—Ä: (–Ω–µ –Ω–∞–π–¥–µ–Ω) - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.\n"

    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {cart_text}")
    await message.answer(cart_text)


@dp.message(lambda message: message.text == "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if user_id not in cart or not cart[user_id]:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
        return

    cart_items = cart[user_id]
    total_price = sum(item['product']['price'] * item['quantity'] for item in cart_items if item['quantity'] > 0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    order_text = "–í–∞—à –∑–∞–∫–∞–∑:\n"
    for item in cart_items:
        if 'product' in item and item['quantity'] > 0:
            product = item['product']
            order_text += f"üå∏ {product['name']} - {item['quantity']} —à—Ç. - {item['quantity'] * product['price']} —Ä—É–±.\n"

    order_text += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ."

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    buttons = [
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=[buttons])

    await message.answer(order_text, reply_markup=markup)


@dp.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if user_id not in cart or not cart[user_id]:
        await callback_query.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è API
    order_items = [
        {
            "product_id": item['product']['id'],
            "quantity": item['quantity'],
            "total_price": item['product']['price'] * item['quantity']
        }
        for item in cart[user_id] if item['quantity'] > 0
    ]

    try:
        async with aiohttp.ClientSession() as session:
            payload = {
                "telegram_user_id": user_id,
                "order_items": order_items
            }
            async with session.post(f"{API_URL}/catalog/api/telegram_orders/", json=payload) as response:
                if response.status == 201:
                    await callback_query.message.answer("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É üå∏")
                    cart.pop(user_id, None)  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                else:
                    await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(lambda c: c.data == "cancel_order")
async def cancel_order(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    await callback_query.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")




# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
